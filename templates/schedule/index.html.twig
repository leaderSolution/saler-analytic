{% extends 'dashboard.html.twig' %}

{% block title %}Hello ScheduleController!{% endblock %}

{% block content %}
{% include "top-bar.html.twig" with {'title':'Agenda','btn':'<!-- Button trigger modal -->
      <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
        Add visit
      </button>'} %}
      <!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Add a new Visit</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      {{ form_start(form) }}
      <div class="modal-body">
      
        <div class="row">
         <div class="col-sm-8">
          <label>Title</label>
           {{ form_widget(form.title) }}
         </div>
        </div>
        <div class="row">
          <div class="col-sm-6">
            <label>Start At</label>
            {{ form_widget(form.startTime) }}
          </div>
          <div class="col-sm-6">
            <label>End At</label>
            {{ form_widget(form.endTime) }}
          </div>
        </div>
        <div class="row">
          <div class="col">
          <label>Background Color</label>
          {{ form_widget(form.backgroundColor) }}
        </div>
        <div class="col">
          <label>Border Color </label>
          {{ form_widget(form.borderColor) }}
        </div>
        <div class="col">
          <label>Text Color </label>
          {{ form_widget(form.textColor) }}
        </div>
        </div>
        <div class="row">
          <div class="col">
            <label>Client </label>
            {{ form_widget(form.client) }}
          </div>
          <div class="col">
            <a href="#">Add new client </a>
          </div>
        </div>
        <div class="row">
          <div class="form-check form-switch">
            {{ form_widget(form.allDay) }}
            <label class="form-check-label" for="{{ form.allDay.vars.id }}"></label>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="submit" class="btn btn-primary">Save changes</button>
      </div>
      {{ form_end(form) }}
    </div>
  </div>
</div>
<div class="card">
  <div class="card-body">
    <div id='calendar'></div>
  </div>
</div>
{% endblock %}

{% block javascripts %}   
    {{ encore_entry_script_tags('schedule') }} 
    <script>
      // Client ID and API key from the Developer Console
      var CLIENT_ID = '519067471596-kntie173hg3ivmff8llb68pflufqbs0k.apps.googleusercontent.com';
      var API_KEY = 'AIzaSyAJ7J7F4BNXH0403hkM2zRTP31Nae_EfRk';

      // Array of API discovery doc URLs for APIs used by the quickstart
      var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

      // Authorization scopes required by the API; multiple scopes can be
      // included, separated by spaces.
      var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

      var authorizeButton = document.getElementById('authorize_button');
      var signoutButton = document.getElementById('signout_button');

      /**
       *  On load, called to load the auth2 library and API client library.
       */
      function handleClientLoad() {
        gapi.load('client:auth2', initClient);
      }

      /**
       *  Initializes the API client library and sets up sign-in state
       *  listeners.
       */
      function initClient() {
        gapi.client.init({
          apiKey: API_KEY,
          clientId: CLIENT_ID,
          discoveryDocs: DISCOVERY_DOCS,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;
        }, function(error) {
          appendPre(JSON.stringify(error, null, 2));
        });
      }

      /**
       *  Called when the signed in status changes, to update the UI
       *  appropriately. After a sign-in, the API is called.
       */
      function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
          authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
          listUpcomingEvents();
        } else {
          authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
        }
      }

      /**
       *  Sign in the user upon button click.
       */
      function handleAuthClick(event) {
        gapi.auth2.getAuthInstance().signIn();
      }

      /**
       *  Sign out the user upon button click.
       */
      function handleSignoutClick(event) {
        gapi.auth2.getAuthInstance().signOut();
      }

      /**
       * Append a pre element to the body containing the given message
       * as its text node. Used to display the results of the API call.
       *
       * @param {string} message Text to be placed in pre element.
       */
      function appendPre(message) {
        var pre = document.getElementById('content');
        var textContent = document.createTextNode(message + '\n');
        pre.appendChild(textContent);
      }

      /**
       * Print the summary and start datetime/date of the next ten events in
       * the authorized user's calendar. If no events are found an
       * appropriate message is printed.
       */
      function listUpcomingEvents() {
        gapi.client.calendar.events.list({
          'calendarId': 'primary',
          'timeMin': (new Date()).toISOString(),
          'showDeleted': false,
          'singleEvents': true,
          'maxResults': 10,
          'orderBy': 'startTime'
        }).then(function(response) {
          var events = response.result.items;
          appendPre('Upcoming events:');

          if (events.length > 0) {
            for (i = 0; i < events.length; i++) {
              var event = events[i];
              var when = event.start.dateTime;
              if (!when) {
                when = event.start.date;
              }
              appendPre(event.summary + ' (' + when + ')')
            }
          } else {
            appendPre('No upcoming events found.');
          }
        });
      }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
{% endblock %} 
